name: Helm Deployment Demo
on:
  push:
    branches: [ main ]
    paths:
      - 'website/**'
      - 'helm/**'
      - '.github/workflows/**'

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: demo-app
  EKS_CLUSTER: demo-eks-cluster

jobs:
  helm-demo:
    name: Helm Deployment Demo
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd website
        docker buildx create --use
        docker buildx build \
          --platform linux/amd64 \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          --push .

    - name: Install Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.0

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

    - name: Demo 1 - Show Current Helm State
      run: |
        echo "üîç Current Helm Releases:"
        helm list -A
        echo "üìä Current Values for demo-app:"
        helm get values demo-app

    - name: Demo 2 - Deploy with Different Values
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üöÄ Deploying with new configuration..."
        # Create values file with new settings
        cat <<EOF > production-values.yaml
        replicaCount: 3
        image:
          repository: $ECR_REGISTRY/$ECR_REPOSITORY
          tag: $IMAGE_TAG
        resources:
          limits:
            cpu: "500m"
            memory: "512Mi"
          requests:
            cpu: "250m"
            memory: "256Mi"
        EOF
        
        echo "üìù Generated values file:"
        cat production-values.yaml
        
        echo "‚ö° Upgrading Helm release..."
        helm upgrade demo-app helm/website-chart -f production-values.yaml --wait

    - name: Demo 3 - Show Deployment History
      run: |
        echo "üìú Helm Release History:"
        helm history demo-app
        
        echo "üîç Current Deployment Status:"
        kubectl get deployments,pods,services -l app=website

    - name: Demo 4 - Package Chart
      run: |
        echo "üì¶ Packaging Helm Chart..."
        helm package helm/website-chart
        
        echo "üìã Chart Details:"
        helm show chart helm/website-chart

    - name: Demo 5 - Rollback Simulation
      if: github.event_name == 'pull_request'
      run: |
        echo "‚èÆÔ∏è Simulating rollback..."
        helm rollback demo-app 1
        
        echo "‚úÖ Post-rollback status:"
        helm get values demo-app
        kubectl get pods -l app=website

    - name: Verify final state
      run: |
        echo "üéØ Final Deployment State:"
        kubectl wait --for=condition=ready pod -l app=website --timeout=2m
        kubectl get pods -l app=website -o wide
        
        echo "üìä Final Helm Values:"
        helm get values demo-app
        
        echo "üîÑ Deployment History:"
        helm history demo-app

    - name: Post results as comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const helmStatus = await exec.getExecOutput('helm', ['get', 'values', 'demo-app']);
          const comment = `
          ## üöÄ Helm Deployment Summary
          
          ### Current Values
          \`\`\`yaml
          ${helmStatus.stdout}
          \`\`\`
          
          ### Deployment Status
          - Release: demo-app
          - Namespace: default
          - Last Deployed: ${new Date().toISOString()}
          
          Check the Actions tab for full deployment details!
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });